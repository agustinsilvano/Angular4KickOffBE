##See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.
#
#FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS base
#WORKDIR /app
#EXPOSE 80
#EXPOSE 443
#ENV DOTNET_USE_POLLING_FILE_WATCHER 1
#
#FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS build
#WORKDIR /src
#COPY ["Angular4KickOffBE.csproj", "Angular4KickOffBE/"]
#RUN dotnet restore "Angular4KickOffBE/Angular4KickOffBE.csproj"
#WORKDIR "/src/Angular4KickOffBE"
#COPY . .
#RUN dotnet build "Angular4KickOffBE.csproj" -c Release -o /app/build
#
#FROM build AS publish
#RUN dotnet publish "Angular4KickOffBE.csproj" -c Release -o /app/publish
#
#FROM base AS final
#WORKDIR /app
#COPY --from=publish /app/publish .
#ENTRYPOINT dotnet watch run --no-restore Angular4KickOffBE.dll
##ENTRYPOINT ["dotnet", "watch" ,"Angular4KickOffBE.dll"]
#
##FROM mcr.microsoft.com/dotnet/core/sdk:3.1
##
### Required inside Docker, otherwise file-change events may not trigger
##ENV DOTNET_USE_POLLING_FILE_WATCHER 1
##
### Set a working dir at least 2 deep. The output and intermediate output folders will be /code/obj and /code/bin
##WORKDIR /app
##
### By copying these into the image when building it, we don't have to re-run restore everytime we launch a new container
##COPY . .
##RUN dotnet restore
##
### This will build and launch the server in a loop, restarting whenever a *.cs file changes
##ENTRYPOINT dotnet watch run --no-restore

FROM mcr.microsoft.com/dotnet/core/sdk:3.1 AS build
ENV DOTNET_USE_POLLING_FILE_WATCHER 1
WORKDIR /app
ENTRYPOINT [ "dotnet", "watch", "run", "--no-restore", "--urls", "http://0.0.0.0:5000" ]